From a8e0823810ce772edfb6d69ec361bd958867ab5c Mon Sep 17 00:00:00 2001
From: Elwardi <elwardifadeli@gmail.com>
Date: Thu, 23 Sep 2021 12:26:23 +0000
Subject: [PATCH] compile on Ubuntu 20.04 with system MPI

---
 ThirdParty/tools/makeThirdPartyFunctionsForRPM | 8 ++++----
 etc/bashrc                                     | 6 ++++--
 wmake/rules/linux64Gcc/c                       | 2 +-
 wmake/rules/linux64Gcc/c++                     | 2 +-
 4 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/ThirdParty/tools/makeThirdPartyFunctionsForRPM b/ThirdParty/tools/makeThirdPartyFunctionsForRPM
index 9430685b..59e3fe9d 100755
--- a/ThirdParty/tools/makeThirdPartyFunctionsForRPM
+++ b/ThirdParty/tools/makeThirdPartyFunctionsForRPM
@@ -181,10 +181,10 @@ rpm_build()
 
     #Build RPM package
     echo "Building package $package using SPEC file : $specFile. Optional args: $@"
-    #rpmbuild --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --clean -bb ./SPECS/$specFile "$@"
+    #rpmbuild --define "_build_id_links none" --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --clean -bb ./SPECS/$specFile "$@"
     #
     # Let's keep the compilation directory alive for now in order to facilitate postmortems of failed compilations
-    rpmbuild --define "_topdir $buildBase" --dbpath $buildBase/rpmDB -bb ./SPECS/$specFile "$@"
+    rpmbuild --define "_build_id_links none" --define "_topdir $buildBase" --dbpath $buildBase/rpmDB -bb ./SPECS/$specFile "$@"
 }
 
 #
@@ -206,10 +206,10 @@ rpm_build_install_stage_only()
 
     #Build RPM package
     echo "Building package $package using SPEC file : $specFile. Optional args: $@"
-    #rpmbuild --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --clean -bb ./SPECS/$specFile "$@"
+    #rpmbuild --define "_build_id_links none" --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --clean -bb ./SPECS/$specFile "$@"
     #
     # Let's keep the compilation directory alive for now in order to facilitate postmortems of failed compilations
-    rpmbuild --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --short-circuit -bi ./SPECS/$specFile "$@"
+    rpmbuild --define "_build_id_links none" --define "_topdir $buildBase" --dbpath $buildBase/rpmDB --short-circuit -bi ./SPECS/$specFile "$@"
 }
 
 #
diff --git a/etc/bashrc b/etc/bashrc
index 688bfde0..419dbcdf 100755
--- a/etc/bashrc
+++ b/etc/bashrc
@@ -96,7 +96,7 @@ export WM_THIRD_PARTY_DIR=$WM_PROJECT_DIR/ThirdParty
 
 #
 # For AllMake.stage2
-export WM_THIRD_PARTY_USE_OPENMPI_188=1
+export WM_THIRD_PARTY_USE_OPENMPI_188=0
 #export WM_THIRD_PARTY_USE_OPENMPI_400=1
 
 #
@@ -189,7 +189,7 @@ export WM_COMPILER_LIB_ARCH=
 : ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
 
 # WM_MPLIB = SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MVAPICH2
-: ${WM_MPLIB:=OPENMPI}; export WM_MPLIB
+: ${WM_MPLIB:=SYSTEMOPENMPI}; export WM_MPLIB
 
 # WM_NCOMPPROCS = <number of processes to use>
 # Warning: Need to use a complete path for foamGetSystemInfo because the PATH
@@ -601,3 +601,5 @@ unset cleanEnv cleanProg foamInstall foamOldDirs
 unset _foamSource
 
 # -----------------------------------------------------------------------------
+export WM_CC='gcc-7'
+export WM_CXX='g++-7'
diff --git a/wmake/rules/linux64Gcc/c b/wmake/rules/linux64Gcc/c
index f4114be3..33e81aaa 100644
--- a/wmake/rules/linux64Gcc/c
+++ b/wmake/rules/linux64Gcc/c
@@ -2,7 +2,7 @@
 
 cWARN        = -Wall
 
-cc          = gcc -m64
+cc          = $(WM_CC) -m64
 
 include $(RULES)/c$(WM_COMPILE_OPTION)
 
diff --git a/wmake/rules/linux64Gcc/c++ b/wmake/rules/linux64Gcc/c++
index 19e6f87c..a8dd7dbc 100644
--- a/wmake/rules/linux64Gcc/c++
+++ b/wmake/rules/linux64Gcc/c++
@@ -5,7 +5,7 @@ c++WARN     = -Wall -Wextra -Wno-unused-parameter -Wold-style-cast -Wnon-virtual
 # Suppress some warnings for flex++ and CGAL
 c++LESSWARN = -Wno-old-style-cast -Wno-unused-local-typedefs -Wno-array-bounds
 
-CC          = g++ -std=c++11 -m64
+CC          = $(WM_CXX) -std=c++11 -m64
 
 include $(RULES)/c++$(WM_COMPILE_OPTION)
 
-- 
2.26.2

